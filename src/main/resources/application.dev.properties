server.port=82

###mybatis설정

# username
spring.datasource.hikari.username=user01
# password
spring.datasource.hikari.password=user01
# url
#spring.datasource.url=jdbc:mariadb://13.209.19.188:3306/user01
# driver
#spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:mariadb://52.79.250.182:3306/user01

###SQL LOG 설정
log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator
log4jdbc.dump.sql.maxlinelength=0

logging.level.jdbc=OFF
logging.level.jdbc.sqlonly=OFF           
logging.level.jdbc.sqltiming=DEBUG      
logging.level.jdbc.audit=OFF             
logging.level.jdbc.resultset=OFF         
logging.level.jdbc.resultsettable=INFO   
logging.level.jdbc.connection=OFF    
logging.level.com.zaxxer.hikari=OFF
logging.level.javax.sql.DataSource=INFO

#Mapper 위치
mybatis.mapper-locations=classpath:database/mappers/*Mapper.xml
#Config 위치
mybatis.config-location=classpath:database/config/config.xml

###JSP 
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

###File관리
#Multipart 사용여부
spring.servlet.multipart.enabled=true
# 파일 하나당 최대 사이즈
spring.servlet.multipart.max-file-size=10MB
# 총 파일 최대 사이즈
spring.servlet.multipart.max-request-size=50MB

###Upload 경로
app.upload=D:///gdj68js/upload/

##upload위치구분하기위해서 
app.board.notice=notice

app.board.qn=qna

##파일 요청 url
app.url.path=/files/**
##파일 맵핑 Base 경로 꺼내갈때 file:///붙여야함 
app.upload.mapping=file:///D:///gdj68js/upload/

##transaction처리
spring.aop.proxy-target-class=true

##전역 레벨 설정
logging.level.root=info

## Web 요청 발생시 파라미터 출력
## 종류나, 값이 클 경우 생략될 수도 있다.
logging.level.org.springframework.web=trace
spring.mvc.log-request-details=true


###Message 설정
#message파일의 위치 앞에거는 폴더명 뒤는 파일명
spring.messages.basename=messages/message
#Encoding설정
spring.messages.encoding=UTF-8
spring.messages.use-code-as-default-message=true
### true  : 예외를 발생 시키지 않고 key를 출력
### false : 예외를 발생
#message 파일 내용의 변경을 감지하는 간격(초단위)
spring.messages.cache-duration=600

#Security 비활성화
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

##SocialLogin
##################Kakao
# Rest Api key
spring.security.oauth2.client.registration.kakao.client-id=99a52f47602f8ad4434ae05a22fd8ff0
# Admin Key
spring.security.oauth2.client.registration.kakao.client-secret=e2326d7595480bbe48a6f62398558b08
# Redirect URL
spring.security.oauth2.client.registration.kakao.redirect-uri = http://localhost:82/login/oauth2/code/kakao
# 고정값
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
# 회원가입시 추가로 가져 오는 유저 정보 항목
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image,account_email,birthday
# Social Login 업체 명
spring.security.oauth2.client.registration.kakao.client-name=Kakao
# 인증 요청시 메서드 형식
spring.security.oauth2.client.registration.kakao.client-authentication-method=POST

##Provider
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri= https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id